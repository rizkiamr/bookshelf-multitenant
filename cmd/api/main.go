package main

import (
	"log"
	"net/http"

	_ "github.com/rizkiamr/bookshelf-multitenant/cmd/api/docs" // docs is generated by Swag CL
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v1
func main() {
	// Use the http.NewServeMux function to initialize a new servemux, then
	// register the home function as the handler for the "/" URL pattern.
	mux := http.NewServeMux()
	mux.HandleFunc("/", home)
	mux.HandleFunc("/apidocs/", httpSwagger.WrapHandler)
	mux.HandleFunc("/v1/healthz", health)
	mux.HandleFunc("/v1/version", version)
	mux.HandleFunc("/v1/book/view", bookView)
	mux.HandleFunc("/v1/book/create", bookCreate)
	mux.HandleFunc("/v1/user/view", userView)

	// Use the http.ListenAndServe() function to start a new web server.
	// We pass in two parameters: The TCP network address to listen on (in this case ":8080")
	// and the servemux we just created.
	// If http.ListenAndServe() returns an error, we use the log.Fatal() function
	// to log the error message and exit.
	// Note that any error returned by http.ListenAndServe is always non-nil.
	log.Println("Starting server on :8080")
	err := http.ListenAndServe(":8080", mux)
	log.Fatal(err)
}
